// Copyright 2021 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **

import * as protos from '../protos/protos';
import * as assert from 'assert';
import * as sinon from 'sinon';
import {SinonStub} from 'sinon';
import { describe, it } from 'mocha';
import * as clouddeployModule from '../src';

import {PassThrough} from 'stream';

import {protobuf, LROperation, operationsProtos} from 'google-gax';

function generateSampleMessage<T extends object>(instance: T) {
    const filledObject = (instance.constructor as typeof protobuf.Message)
        .toObject(instance as protobuf.Message<T>, {defaults: true});
    return (instance.constructor as typeof protobuf.Message).fromObject(filledObject) as T;
}

function stubSimpleCall<ResponseType>(response?: ResponseType, error?: Error) {
    return error ? sinon.stub().rejects(error) : sinon.stub().resolves([response]);
}

function stubSimpleCallWithCallback<ResponseType>(response?: ResponseType, error?: Error) {
    return error ? sinon.stub().callsArgWith(2, error) : sinon.stub().callsArgWith(2, null, response);
}

function stubLongRunningCall<ResponseType>(response?: ResponseType, callError?: Error, lroError?: Error) {
    const innerStub = lroError ? sinon.stub().rejects(lroError) : sinon.stub().resolves([response]);
    const mockOperation = {
        promise: innerStub,
    };
    return callError ? sinon.stub().rejects(callError) : sinon.stub().resolves([mockOperation]);
}

function stubLongRunningCallWithCallback<ResponseType>(response?: ResponseType, callError?: Error, lroError?: Error) {
    const innerStub = lroError ? sinon.stub().rejects(lroError) : sinon.stub().resolves([response]);
    const mockOperation = {
        promise: innerStub,
    };
    return callError ? sinon.stub().callsArgWith(2, callError) : sinon.stub().callsArgWith(2, null, mockOperation);
}

function stubPageStreamingCall<ResponseType>(responses?: ResponseType[], error?: Error) {
    const pagingStub = sinon.stub();
    if (responses) {
        for (let i = 0; i < responses.length; ++i) {
            pagingStub.onCall(i).callsArgWith(2, null, responses[i]);
        }
    }
    const transformStub = error ? sinon.stub().callsArgWith(2, error) : pagingStub;
    const mockStream = new PassThrough({
        objectMode: true,
        transform: transformStub,
    });
    // trigger as many responses as needed
    if (responses) {
        for (let i = 0; i < responses.length; ++i) {
            setImmediate(() => { mockStream.write({}); });
        }
        setImmediate(() => { mockStream.end(); });
    } else {
        setImmediate(() => { mockStream.write({}); });
        setImmediate(() => { mockStream.end(); });
    }
    return sinon.stub().returns(mockStream);
}

function stubAsyncIterationCall<ResponseType>(responses?: ResponseType[], error?: Error) {
    let counter = 0;
    const asyncIterable = {
        [Symbol.asyncIterator]() {
            return {
                async next() {
                    if (error) {
                        return Promise.reject(error);
                    }
                    if (counter >= responses!.length) {
                        return Promise.resolve({done: true, value: undefined});
                    }
                    return Promise.resolve({done: false, value: responses![counter++]});
                }
            };
        }
    };
    return sinon.stub().returns(asyncIterable);
}

describe('v1.CloudDeployClient', () => {
    it('has servicePath', () => {
        const servicePath = clouddeployModule.v1.CloudDeployClient.servicePath;
        assert(servicePath);
    });

    it('has apiEndpoint', () => {
        const apiEndpoint = clouddeployModule.v1.CloudDeployClient.apiEndpoint;
        assert(apiEndpoint);
    });

    it('has port', () => {
        const port = clouddeployModule.v1.CloudDeployClient.port;
        assert(port);
        assert(typeof port === 'number');
    });

    it('should create a client with no option', () => {
        const client = new clouddeployModule.v1.CloudDeployClient();
        assert(client);
    });

    it('should create a client with gRPC fallback', () => {
        const client = new clouddeployModule.v1.CloudDeployClient({
            fallback: true,
        });
        assert(client);
    });

    it('has initialize method and supports deferred initialization', async () => {
        const client = new clouddeployModule.v1.CloudDeployClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
        assert.strictEqual(client.cloudDeployStub, undefined);
        await client.initialize();
        assert(client.cloudDeployStub);
    });

    it('has close method', () => {
        const client = new clouddeployModule.v1.CloudDeployClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
        client.close();
    });

    it('has getProjectId method', async () => {
        const fakeProjectId = 'fake-project-id';
        const client = new clouddeployModule.v1.CloudDeployClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
        client.auth.getProjectId = sinon.stub().resolves(fakeProjectId);
        const result = await client.getProjectId();
        assert.strictEqual(result, fakeProjectId);
        assert((client.auth.getProjectId as SinonStub).calledWithExactly());
    });

    it('has getProjectId method with callback', async () => {
        const fakeProjectId = 'fake-project-id';
        const client = new clouddeployModule.v1.CloudDeployClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
        client.auth.getProjectId = sinon.stub().callsArgWith(0, null, fakeProjectId);
        const promise = new Promise((resolve, reject) => {
            client.getProjectId((err?: Error|null, projectId?: string|null) => {
                if (err) {
                    reject(err);
                } else {
                    resolve(projectId);
                }
            });
        });
        const result = await promise;
        assert.strictEqual(result, fakeProjectId);
    });

    describe('getDeliveryPipeline', () => {
        it('invokes getDeliveryPipeline without error', async () => {
            const client = new clouddeployModule.v1.CloudDeployClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.deploy.v1.GetDeliveryPipelineRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.cloud.deploy.v1.DeliveryPipeline());
            client.innerApiCalls.getDeliveryPipeline = stubSimpleCall(expectedResponse);
            const [response] = await client.getDeliveryPipeline(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.getDeliveryPipeline as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes getDeliveryPipeline without error using callback', async () => {
            const client = new clouddeployModule.v1.CloudDeployClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.deploy.v1.GetDeliveryPipelineRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.cloud.deploy.v1.DeliveryPipeline());
            client.innerApiCalls.getDeliveryPipeline = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.getDeliveryPipeline(
                    request,
                    (err?: Error|null, result?: protos.google.cloud.deploy.v1.IDeliveryPipeline|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.getDeliveryPipeline as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes getDeliveryPipeline with error', async () => {
            const client = new clouddeployModule.v1.CloudDeployClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.deploy.v1.GetDeliveryPipelineRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.getDeliveryPipeline = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.getDeliveryPipeline(request), expectedError);
            assert((client.innerApiCalls.getDeliveryPipeline as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
    });

    describe('getTarget', () => {
        it('invokes getTarget without error', async () => {
            const client = new clouddeployModule.v1.CloudDeployClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.deploy.v1.GetTargetRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.cloud.deploy.v1.Target());
            client.innerApiCalls.getTarget = stubSimpleCall(expectedResponse);
            const [response] = await client.getTarget(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.getTarget as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes getTarget without error using callback', async () => {
            const client = new clouddeployModule.v1.CloudDeployClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.deploy.v1.GetTargetRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.cloud.deploy.v1.Target());
            client.innerApiCalls.getTarget = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.getTarget(
                    request,
                    (err?: Error|null, result?: protos.google.cloud.deploy.v1.ITarget|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.getTarget as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes getTarget with error', async () => {
            const client = new clouddeployModule.v1.CloudDeployClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.deploy.v1.GetTargetRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.getTarget = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.getTarget(request), expectedError);
            assert((client.innerApiCalls.getTarget as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
    });

    describe('getRelease', () => {
        it('invokes getRelease without error', async () => {
            const client = new clouddeployModule.v1.CloudDeployClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.deploy.v1.GetReleaseRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.cloud.deploy.v1.Release());
            client.innerApiCalls.getRelease = stubSimpleCall(expectedResponse);
            const [response] = await client.getRelease(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.getRelease as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes getRelease without error using callback', async () => {
            const client = new clouddeployModule.v1.CloudDeployClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.deploy.v1.GetReleaseRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.cloud.deploy.v1.Release());
            client.innerApiCalls.getRelease = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.getRelease(
                    request,
                    (err?: Error|null, result?: protos.google.cloud.deploy.v1.IRelease|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.getRelease as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes getRelease with error', async () => {
            const client = new clouddeployModule.v1.CloudDeployClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.deploy.v1.GetReleaseRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.getRelease = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.getRelease(request), expectedError);
            assert((client.innerApiCalls.getRelease as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
    });

    describe('approveRollout', () => {
        it('invokes approveRollout without error', async () => {
            const client = new clouddeployModule.v1.CloudDeployClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.deploy.v1.ApproveRolloutRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.cloud.deploy.v1.ApproveRolloutResponse());
            client.innerApiCalls.approveRollout = stubSimpleCall(expectedResponse);
            const [response] = await client.approveRollout(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.approveRollout as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes approveRollout without error using callback', async () => {
            const client = new clouddeployModule.v1.CloudDeployClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.deploy.v1.ApproveRolloutRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.cloud.deploy.v1.ApproveRolloutResponse());
            client.innerApiCalls.approveRollout = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.approveRollout(
                    request,
                    (err?: Error|null, result?: protos.google.cloud.deploy.v1.IApproveRolloutResponse|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.approveRollout as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes approveRollout with error', async () => {
            const client = new clouddeployModule.v1.CloudDeployClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.deploy.v1.ApproveRolloutRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.approveRollout = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.approveRollout(request), expectedError);
            assert((client.innerApiCalls.approveRollout as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
    });

    describe('getRollout', () => {
        it('invokes getRollout without error', async () => {
            const client = new clouddeployModule.v1.CloudDeployClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.deploy.v1.GetRolloutRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.cloud.deploy.v1.Rollout());
            client.innerApiCalls.getRollout = stubSimpleCall(expectedResponse);
            const [response] = await client.getRollout(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.getRollout as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes getRollout without error using callback', async () => {
            const client = new clouddeployModule.v1.CloudDeployClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.deploy.v1.GetRolloutRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.cloud.deploy.v1.Rollout());
            client.innerApiCalls.getRollout = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.getRollout(
                    request,
                    (err?: Error|null, result?: protos.google.cloud.deploy.v1.IRollout|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.getRollout as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes getRollout with error', async () => {
            const client = new clouddeployModule.v1.CloudDeployClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.deploy.v1.GetRolloutRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.getRollout = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.getRollout(request), expectedError);
            assert((client.innerApiCalls.getRollout as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
    });

    describe('getConfig', () => {
        it('invokes getConfig without error', async () => {
            const client = new clouddeployModule.v1.CloudDeployClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.deploy.v1.GetConfigRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.cloud.deploy.v1.Config());
            client.innerApiCalls.getConfig = stubSimpleCall(expectedResponse);
            const [response] = await client.getConfig(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.getConfig as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes getConfig without error using callback', async () => {
            const client = new clouddeployModule.v1.CloudDeployClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.deploy.v1.GetConfigRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.cloud.deploy.v1.Config());
            client.innerApiCalls.getConfig = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.getConfig(
                    request,
                    (err?: Error|null, result?: protos.google.cloud.deploy.v1.IConfig|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.getConfig as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes getConfig with error', async () => {
            const client = new clouddeployModule.v1.CloudDeployClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.deploy.v1.GetConfigRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.getConfig = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.getConfig(request), expectedError);
            assert((client.innerApiCalls.getConfig as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
    });

    describe('createDeliveryPipeline', () => {
        it('invokes createDeliveryPipeline without error', async () => {
            const client = new clouddeployModule.v1.CloudDeployClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.deploy.v1.CreateDeliveryPipelineRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.longrunning.Operation());
            client.innerApiCalls.createDeliveryPipeline = stubLongRunningCall(expectedResponse);
            const [operation] = await client.createDeliveryPipeline(request);
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.createDeliveryPipeline as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes createDeliveryPipeline without error using callback', async () => {
            const client = new clouddeployModule.v1.CloudDeployClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.deploy.v1.CreateDeliveryPipelineRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.longrunning.Operation());
            client.innerApiCalls.createDeliveryPipeline = stubLongRunningCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.createDeliveryPipeline(
                    request,
                    (err?: Error|null,
                     result?: LROperation<protos.google.cloud.deploy.v1.IDeliveryPipeline, protos.google.cloud.deploy.v1.IOperationMetadata>|null
                    ) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const operation = await promise as LROperation<protos.google.cloud.deploy.v1.IDeliveryPipeline, protos.google.cloud.deploy.v1.IOperationMetadata>;
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.createDeliveryPipeline as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes createDeliveryPipeline with call error', async () => {
            const client = new clouddeployModule.v1.CloudDeployClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.deploy.v1.CreateDeliveryPipelineRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.createDeliveryPipeline = stubLongRunningCall(undefined, expectedError);
            await assert.rejects(client.createDeliveryPipeline(request), expectedError);
            assert((client.innerApiCalls.createDeliveryPipeline as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes createDeliveryPipeline with LRO error', async () => {
            const client = new clouddeployModule.v1.CloudDeployClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.deploy.v1.CreateDeliveryPipelineRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.createDeliveryPipeline = stubLongRunningCall(undefined, undefined, expectedError);
            const [operation] = await client.createDeliveryPipeline(request);
            await assert.rejects(operation.promise(), expectedError);
            assert((client.innerApiCalls.createDeliveryPipeline as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes checkCreateDeliveryPipelineProgress without error', async () => {
            const client = new clouddeployModule.v1.CloudDeployClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const expectedResponse = generateSampleMessage(new operationsProtos.google.longrunning.Operation());
            expectedResponse.name = 'test';
            expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
            expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')}

            client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
            const decodedOperation = await client.checkCreateDeliveryPipelineProgress(expectedResponse.name);
            assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
            assert(decodedOperation.metadata);
            assert((client.operationsClient.getOperation as SinonStub).getCall(0));
        });

        it('invokes checkCreateDeliveryPipelineProgress with error', async () => {
            const client = new clouddeployModule.v1.CloudDeployClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const expectedError = new Error('expected');

            client.operationsClient.getOperation = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.checkCreateDeliveryPipelineProgress(''), expectedError);
            assert((client.operationsClient.getOperation as SinonStub)
                .getCall(0));
        });
    });

    describe('updateDeliveryPipeline', () => {
        it('invokes updateDeliveryPipeline without error', async () => {
            const client = new clouddeployModule.v1.CloudDeployClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.deploy.v1.UpdateDeliveryPipelineRequest());
            request.deliveryPipeline = {};
            request.deliveryPipeline.name = '';
            const expectedHeaderRequestParams = "delivery_pipeline.name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.longrunning.Operation());
            client.innerApiCalls.updateDeliveryPipeline = stubLongRunningCall(expectedResponse);
            const [operation] = await client.updateDeliveryPipeline(request);
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.updateDeliveryPipeline as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes updateDeliveryPipeline without error using callback', async () => {
            const client = new clouddeployModule.v1.CloudDeployClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.deploy.v1.UpdateDeliveryPipelineRequest());
            request.deliveryPipeline = {};
            request.deliveryPipeline.name = '';
            const expectedHeaderRequestParams = "delivery_pipeline.name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.longrunning.Operation());
            client.innerApiCalls.updateDeliveryPipeline = stubLongRunningCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.updateDeliveryPipeline(
                    request,
                    (err?: Error|null,
                     result?: LROperation<protos.google.cloud.deploy.v1.IDeliveryPipeline, protos.google.cloud.deploy.v1.IOperationMetadata>|null
                    ) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const operation = await promise as LROperation<protos.google.cloud.deploy.v1.IDeliveryPipeline, protos.google.cloud.deploy.v1.IOperationMetadata>;
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.updateDeliveryPipeline as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes updateDeliveryPipeline with call error', async () => {
            const client = new clouddeployModule.v1.CloudDeployClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.deploy.v1.UpdateDeliveryPipelineRequest());
            request.deliveryPipeline = {};
            request.deliveryPipeline.name = '';
            const expectedHeaderRequestParams = "delivery_pipeline.name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.updateDeliveryPipeline = stubLongRunningCall(undefined, expectedError);
            await assert.rejects(client.updateDeliveryPipeline(request), expectedError);
            assert((client.innerApiCalls.updateDeliveryPipeline as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes updateDeliveryPipeline with LRO error', async () => {
            const client = new clouddeployModule.v1.CloudDeployClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.deploy.v1.UpdateDeliveryPipelineRequest());
            request.deliveryPipeline = {};
            request.deliveryPipeline.name = '';
            const expectedHeaderRequestParams = "delivery_pipeline.name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.updateDeliveryPipeline = stubLongRunningCall(undefined, undefined, expectedError);
            const [operation] = await client.updateDeliveryPipeline(request);
            await assert.rejects(operation.promise(), expectedError);
            assert((client.innerApiCalls.updateDeliveryPipeline as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes checkUpdateDeliveryPipelineProgress without error', async () => {
            const client = new clouddeployModule.v1.CloudDeployClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const expectedResponse = generateSampleMessage(new operationsProtos.google.longrunning.Operation());
            expectedResponse.name = 'test';
            expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
            expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')}

            client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
            const decodedOperation = await client.checkUpdateDeliveryPipelineProgress(expectedResponse.name);
            assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
            assert(decodedOperation.metadata);
            assert((client.operationsClient.getOperation as SinonStub).getCall(0));
        });

        it('invokes checkUpdateDeliveryPipelineProgress with error', async () => {
            const client = new clouddeployModule.v1.CloudDeployClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const expectedError = new Error('expected');

            client.operationsClient.getOperation = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.checkUpdateDeliveryPipelineProgress(''), expectedError);
            assert((client.operationsClient.getOperation as SinonStub)
                .getCall(0));
        });
    });

    describe('deleteDeliveryPipeline', () => {
        it('invokes deleteDeliveryPipeline without error', async () => {
            const client = new clouddeployModule.v1.CloudDeployClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.deploy.v1.DeleteDeliveryPipelineRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.longrunning.Operation());
            client.innerApiCalls.deleteDeliveryPipeline = stubLongRunningCall(expectedResponse);
            const [operation] = await client.deleteDeliveryPipeline(request);
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.deleteDeliveryPipeline as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes deleteDeliveryPipeline without error using callback', async () => {
            const client = new clouddeployModule.v1.CloudDeployClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.deploy.v1.DeleteDeliveryPipelineRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.longrunning.Operation());
            client.innerApiCalls.deleteDeliveryPipeline = stubLongRunningCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.deleteDeliveryPipeline(
                    request,
                    (err?: Error|null,
                     result?: LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.deploy.v1.IOperationMetadata>|null
                    ) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const operation = await promise as LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.deploy.v1.IOperationMetadata>;
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.deleteDeliveryPipeline as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes deleteDeliveryPipeline with call error', async () => {
            const client = new clouddeployModule.v1.CloudDeployClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.deploy.v1.DeleteDeliveryPipelineRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.deleteDeliveryPipeline = stubLongRunningCall(undefined, expectedError);
            await assert.rejects(client.deleteDeliveryPipeline(request), expectedError);
            assert((client.innerApiCalls.deleteDeliveryPipeline as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes deleteDeliveryPipeline with LRO error', async () => {
            const client = new clouddeployModule.v1.CloudDeployClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.deploy.v1.DeleteDeliveryPipelineRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.deleteDeliveryPipeline = stubLongRunningCall(undefined, undefined, expectedError);
            const [operation] = await client.deleteDeliveryPipeline(request);
            await assert.rejects(operation.promise(), expectedError);
            assert((client.innerApiCalls.deleteDeliveryPipeline as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes checkDeleteDeliveryPipelineProgress without error', async () => {
            const client = new clouddeployModule.v1.CloudDeployClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const expectedResponse = generateSampleMessage(new operationsProtos.google.longrunning.Operation());
            expectedResponse.name = 'test';
            expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
            expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')}

            client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
            const decodedOperation = await client.checkDeleteDeliveryPipelineProgress(expectedResponse.name);
            assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
            assert(decodedOperation.metadata);
            assert((client.operationsClient.getOperation as SinonStub).getCall(0));
        });

        it('invokes checkDeleteDeliveryPipelineProgress with error', async () => {
            const client = new clouddeployModule.v1.CloudDeployClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const expectedError = new Error('expected');

            client.operationsClient.getOperation = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.checkDeleteDeliveryPipelineProgress(''), expectedError);
            assert((client.operationsClient.getOperation as SinonStub)
                .getCall(0));
        });
    });

    describe('createTarget', () => {
        it('invokes createTarget without error', async () => {
            const client = new clouddeployModule.v1.CloudDeployClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.deploy.v1.CreateTargetRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.longrunning.Operation());
            client.innerApiCalls.createTarget = stubLongRunningCall(expectedResponse);
            const [operation] = await client.createTarget(request);
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.createTarget as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes createTarget without error using callback', async () => {
            const client = new clouddeployModule.v1.CloudDeployClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.deploy.v1.CreateTargetRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.longrunning.Operation());
            client.innerApiCalls.createTarget = stubLongRunningCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.createTarget(
                    request,
                    (err?: Error|null,
                     result?: LROperation<protos.google.cloud.deploy.v1.ITarget, protos.google.cloud.deploy.v1.IOperationMetadata>|null
                    ) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const operation = await promise as LROperation<protos.google.cloud.deploy.v1.ITarget, protos.google.cloud.deploy.v1.IOperationMetadata>;
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.createTarget as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes createTarget with call error', async () => {
            const client = new clouddeployModule.v1.CloudDeployClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.deploy.v1.CreateTargetRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.createTarget = stubLongRunningCall(undefined, expectedError);
            await assert.rejects(client.createTarget(request), expectedError);
            assert((client.innerApiCalls.createTarget as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes createTarget with LRO error', async () => {
            const client = new clouddeployModule.v1.CloudDeployClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.deploy.v1.CreateTargetRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.createTarget = stubLongRunningCall(undefined, undefined, expectedError);
            const [operation] = await client.createTarget(request);
            await assert.rejects(operation.promise(), expectedError);
            assert((client.innerApiCalls.createTarget as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes checkCreateTargetProgress without error', async () => {
            const client = new clouddeployModule.v1.CloudDeployClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const expectedResponse = generateSampleMessage(new operationsProtos.google.longrunning.Operation());
            expectedResponse.name = 'test';
            expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
            expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')}

            client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
            const decodedOperation = await client.checkCreateTargetProgress(expectedResponse.name);
            assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
            assert(decodedOperation.metadata);
            assert((client.operationsClient.getOperation as SinonStub).getCall(0));
        });

        it('invokes checkCreateTargetProgress with error', async () => {
            const client = new clouddeployModule.v1.CloudDeployClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const expectedError = new Error('expected');

            client.operationsClient.getOperation = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.checkCreateTargetProgress(''), expectedError);
            assert((client.operationsClient.getOperation as SinonStub)
                .getCall(0));
        });
    });

    describe('updateTarget', () => {
        it('invokes updateTarget without error', async () => {
            const client = new clouddeployModule.v1.CloudDeployClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.deploy.v1.UpdateTargetRequest());
            request.target = {};
            request.target.name = '';
            const expectedHeaderRequestParams = "target.name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.longrunning.Operation());
            client.innerApiCalls.updateTarget = stubLongRunningCall(expectedResponse);
            const [operation] = await client.updateTarget(request);
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.updateTarget as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes updateTarget without error using callback', async () => {
            const client = new clouddeployModule.v1.CloudDeployClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.deploy.v1.UpdateTargetRequest());
            request.target = {};
            request.target.name = '';
            const expectedHeaderRequestParams = "target.name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.longrunning.Operation());
            client.innerApiCalls.updateTarget = stubLongRunningCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.updateTarget(
                    request,
                    (err?: Error|null,
                     result?: LROperation<protos.google.cloud.deploy.v1.ITarget, protos.google.cloud.deploy.v1.IOperationMetadata>|null
                    ) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const operation = await promise as LROperation<protos.google.cloud.deploy.v1.ITarget, protos.google.cloud.deploy.v1.IOperationMetadata>;
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.updateTarget as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes updateTarget with call error', async () => {
            const client = new clouddeployModule.v1.CloudDeployClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.deploy.v1.UpdateTargetRequest());
            request.target = {};
            request.target.name = '';
            const expectedHeaderRequestParams = "target.name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.updateTarget = stubLongRunningCall(undefined, expectedError);
            await assert.rejects(client.updateTarget(request), expectedError);
            assert((client.innerApiCalls.updateTarget as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes updateTarget with LRO error', async () => {
            const client = new clouddeployModule.v1.CloudDeployClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.deploy.v1.UpdateTargetRequest());
            request.target = {};
            request.target.name = '';
            const expectedHeaderRequestParams = "target.name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.updateTarget = stubLongRunningCall(undefined, undefined, expectedError);
            const [operation] = await client.updateTarget(request);
            await assert.rejects(operation.promise(), expectedError);
            assert((client.innerApiCalls.updateTarget as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes checkUpdateTargetProgress without error', async () => {
            const client = new clouddeployModule.v1.CloudDeployClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const expectedResponse = generateSampleMessage(new operationsProtos.google.longrunning.Operation());
            expectedResponse.name = 'test';
            expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
            expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')}

            client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
            const decodedOperation = await client.checkUpdateTargetProgress(expectedResponse.name);
            assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
            assert(decodedOperation.metadata);
            assert((client.operationsClient.getOperation as SinonStub).getCall(0));
        });

        it('invokes checkUpdateTargetProgress with error', async () => {
            const client = new clouddeployModule.v1.CloudDeployClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const expectedError = new Error('expected');

            client.operationsClient.getOperation = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.checkUpdateTargetProgress(''), expectedError);
            assert((client.operationsClient.getOperation as SinonStub)
                .getCall(0));
        });
    });

    describe('deleteTarget', () => {
        it('invokes deleteTarget without error', async () => {
            const client = new clouddeployModule.v1.CloudDeployClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.deploy.v1.DeleteTargetRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.longrunning.Operation());
            client.innerApiCalls.deleteTarget = stubLongRunningCall(expectedResponse);
            const [operation] = await client.deleteTarget(request);
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.deleteTarget as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes deleteTarget without error using callback', async () => {
            const client = new clouddeployModule.v1.CloudDeployClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.deploy.v1.DeleteTargetRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.longrunning.Operation());
            client.innerApiCalls.deleteTarget = stubLongRunningCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.deleteTarget(
                    request,
                    (err?: Error|null,
                     result?: LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.deploy.v1.IOperationMetadata>|null
                    ) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const operation = await promise as LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.deploy.v1.IOperationMetadata>;
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.deleteTarget as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes deleteTarget with call error', async () => {
            const client = new clouddeployModule.v1.CloudDeployClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.deploy.v1.DeleteTargetRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.deleteTarget = stubLongRunningCall(undefined, expectedError);
            await assert.rejects(client.deleteTarget(request), expectedError);
            assert((client.innerApiCalls.deleteTarget as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes deleteTarget with LRO error', async () => {
            const client = new clouddeployModule.v1.CloudDeployClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.deploy.v1.DeleteTargetRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.deleteTarget = stubLongRunningCall(undefined, undefined, expectedError);
            const [operation] = await client.deleteTarget(request);
            await assert.rejects(operation.promise(), expectedError);
            assert((client.innerApiCalls.deleteTarget as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes checkDeleteTargetProgress without error', async () => {
            const client = new clouddeployModule.v1.CloudDeployClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const expectedResponse = generateSampleMessage(new operationsProtos.google.longrunning.Operation());
            expectedResponse.name = 'test';
            expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
            expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')}

            client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
            const decodedOperation = await client.checkDeleteTargetProgress(expectedResponse.name);
            assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
            assert(decodedOperation.metadata);
            assert((client.operationsClient.getOperation as SinonStub).getCall(0));
        });

        it('invokes checkDeleteTargetProgress with error', async () => {
            const client = new clouddeployModule.v1.CloudDeployClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const expectedError = new Error('expected');

            client.operationsClient.getOperation = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.checkDeleteTargetProgress(''), expectedError);
            assert((client.operationsClient.getOperation as SinonStub)
                .getCall(0));
        });
    });

    describe('createRelease', () => {
        it('invokes createRelease without error', async () => {
            const client = new clouddeployModule.v1.CloudDeployClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.deploy.v1.CreateReleaseRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.longrunning.Operation());
            client.innerApiCalls.createRelease = stubLongRunningCall(expectedResponse);
            const [operation] = await client.createRelease(request);
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.createRelease as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes createRelease without error using callback', async () => {
            const client = new clouddeployModule.v1.CloudDeployClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.deploy.v1.CreateReleaseRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.longrunning.Operation());
            client.innerApiCalls.createRelease = stubLongRunningCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.createRelease(
                    request,
                    (err?: Error|null,
                     result?: LROperation<protos.google.cloud.deploy.v1.IRelease, protos.google.cloud.deploy.v1.IOperationMetadata>|null
                    ) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const operation = await promise as LROperation<protos.google.cloud.deploy.v1.IRelease, protos.google.cloud.deploy.v1.IOperationMetadata>;
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.createRelease as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes createRelease with call error', async () => {
            const client = new clouddeployModule.v1.CloudDeployClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.deploy.v1.CreateReleaseRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.createRelease = stubLongRunningCall(undefined, expectedError);
            await assert.rejects(client.createRelease(request), expectedError);
            assert((client.innerApiCalls.createRelease as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes createRelease with LRO error', async () => {
            const client = new clouddeployModule.v1.CloudDeployClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.deploy.v1.CreateReleaseRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.createRelease = stubLongRunningCall(undefined, undefined, expectedError);
            const [operation] = await client.createRelease(request);
            await assert.rejects(operation.promise(), expectedError);
            assert((client.innerApiCalls.createRelease as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes checkCreateReleaseProgress without error', async () => {
            const client = new clouddeployModule.v1.CloudDeployClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const expectedResponse = generateSampleMessage(new operationsProtos.google.longrunning.Operation());
            expectedResponse.name = 'test';
            expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
            expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')}

            client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
            const decodedOperation = await client.checkCreateReleaseProgress(expectedResponse.name);
            assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
            assert(decodedOperation.metadata);
            assert((client.operationsClient.getOperation as SinonStub).getCall(0));
        });

        it('invokes checkCreateReleaseProgress with error', async () => {
            const client = new clouddeployModule.v1.CloudDeployClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const expectedError = new Error('expected');

            client.operationsClient.getOperation = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.checkCreateReleaseProgress(''), expectedError);
            assert((client.operationsClient.getOperation as SinonStub)
                .getCall(0));
        });
    });

    describe('createRollout', () => {
        it('invokes createRollout without error', async () => {
            const client = new clouddeployModule.v1.CloudDeployClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.deploy.v1.CreateRolloutRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.longrunning.Operation());
            client.innerApiCalls.createRollout = stubLongRunningCall(expectedResponse);
            const [operation] = await client.createRollout(request);
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.createRollout as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes createRollout without error using callback', async () => {
            const client = new clouddeployModule.v1.CloudDeployClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.deploy.v1.CreateRolloutRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.longrunning.Operation());
            client.innerApiCalls.createRollout = stubLongRunningCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.createRollout(
                    request,
                    (err?: Error|null,
                     result?: LROperation<protos.google.cloud.deploy.v1.IRollout, protos.google.cloud.deploy.v1.IOperationMetadata>|null
                    ) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const operation = await promise as LROperation<protos.google.cloud.deploy.v1.IRollout, protos.google.cloud.deploy.v1.IOperationMetadata>;
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.createRollout as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes createRollout with call error', async () => {
            const client = new clouddeployModule.v1.CloudDeployClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.deploy.v1.CreateRolloutRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.createRollout = stubLongRunningCall(undefined, expectedError);
            await assert.rejects(client.createRollout(request), expectedError);
            assert((client.innerApiCalls.createRollout as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes createRollout with LRO error', async () => {
            const client = new clouddeployModule.v1.CloudDeployClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.deploy.v1.CreateRolloutRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.createRollout = stubLongRunningCall(undefined, undefined, expectedError);
            const [operation] = await client.createRollout(request);
            await assert.rejects(operation.promise(), expectedError);
            assert((client.innerApiCalls.createRollout as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes checkCreateRolloutProgress without error', async () => {
            const client = new clouddeployModule.v1.CloudDeployClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const expectedResponse = generateSampleMessage(new operationsProtos.google.longrunning.Operation());
            expectedResponse.name = 'test';
            expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
            expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')}

            client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
            const decodedOperation = await client.checkCreateRolloutProgress(expectedResponse.name);
            assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
            assert(decodedOperation.metadata);
            assert((client.operationsClient.getOperation as SinonStub).getCall(0));
        });

        it('invokes checkCreateRolloutProgress with error', async () => {
            const client = new clouddeployModule.v1.CloudDeployClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const expectedError = new Error('expected');

            client.operationsClient.getOperation = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.checkCreateRolloutProgress(''), expectedError);
            assert((client.operationsClient.getOperation as SinonStub)
                .getCall(0));
        });
    });

    describe('listDeliveryPipelines', () => {
        it('invokes listDeliveryPipelines without error', async () => {
            const client = new clouddeployModule.v1.CloudDeployClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.deploy.v1.ListDeliveryPipelinesRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.deploy.v1.DeliveryPipeline()),
              generateSampleMessage(new protos.google.cloud.deploy.v1.DeliveryPipeline()),
              generateSampleMessage(new protos.google.cloud.deploy.v1.DeliveryPipeline()),
            ];
            client.innerApiCalls.listDeliveryPipelines = stubSimpleCall(expectedResponse);
            const [response] = await client.listDeliveryPipelines(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.listDeliveryPipelines as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes listDeliveryPipelines without error using callback', async () => {
            const client = new clouddeployModule.v1.CloudDeployClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.deploy.v1.ListDeliveryPipelinesRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.deploy.v1.DeliveryPipeline()),
              generateSampleMessage(new protos.google.cloud.deploy.v1.DeliveryPipeline()),
              generateSampleMessage(new protos.google.cloud.deploy.v1.DeliveryPipeline()),
            ];
            client.innerApiCalls.listDeliveryPipelines = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.listDeliveryPipelines(
                    request,
                    (err?: Error|null, result?: protos.google.cloud.deploy.v1.IDeliveryPipeline[]|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.listDeliveryPipelines as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes listDeliveryPipelines with error', async () => {
            const client = new clouddeployModule.v1.CloudDeployClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.deploy.v1.ListDeliveryPipelinesRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.listDeliveryPipelines = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.listDeliveryPipelines(request), expectedError);
            assert((client.innerApiCalls.listDeliveryPipelines as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes listDeliveryPipelinesStream without error', async () => {
            const client = new clouddeployModule.v1.CloudDeployClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.deploy.v1.ListDeliveryPipelinesRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.deploy.v1.DeliveryPipeline()),
              generateSampleMessage(new protos.google.cloud.deploy.v1.DeliveryPipeline()),
              generateSampleMessage(new protos.google.cloud.deploy.v1.DeliveryPipeline()),
            ];
            client.descriptors.page.listDeliveryPipelines.createStream = stubPageStreamingCall(expectedResponse);
            const stream = client.listDeliveryPipelinesStream(request);
            const promise = new Promise((resolve, reject) => {
                const responses: protos.google.cloud.deploy.v1.DeliveryPipeline[] = [];
                stream.on('data', (response: protos.google.cloud.deploy.v1.DeliveryPipeline) => {
                    responses.push(response);
                });
                stream.on('end', () => {
                    resolve(responses);
                });
                stream.on('error', (err: Error) => {
                    reject(err);
                });
            });
            const responses = await promise;
            assert.deepStrictEqual(responses, expectedResponse);
            assert((client.descriptors.page.listDeliveryPipelines.createStream as SinonStub)
                .getCall(0).calledWith(client.innerApiCalls.listDeliveryPipelines, request));
            assert.strictEqual(
                (client.descriptors.page.listDeliveryPipelines.createStream as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'],
                expectedHeaderRequestParams
            );
        });

        it('invokes listDeliveryPipelinesStream with error', async () => {
            const client = new clouddeployModule.v1.CloudDeployClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.deploy.v1.ListDeliveryPipelinesRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedError = new Error('expected');
            client.descriptors.page.listDeliveryPipelines.createStream = stubPageStreamingCall(undefined, expectedError);
            const stream = client.listDeliveryPipelinesStream(request);
            const promise = new Promise((resolve, reject) => {
                const responses: protos.google.cloud.deploy.v1.DeliveryPipeline[] = [];
                stream.on('data', (response: protos.google.cloud.deploy.v1.DeliveryPipeline) => {
                    responses.push(response);
                });
                stream.on('end', () => {
                    resolve(responses);
                });
                stream.on('error', (err: Error) => {
                    reject(err);
                });
            });
            await assert.rejects(promise, expectedError);
            assert((client.descriptors.page.listDeliveryPipelines.createStream as SinonStub)
                .getCall(0).calledWith(client.innerApiCalls.listDeliveryPipelines, request));
            assert.strictEqual(
                (client.descriptors.page.listDeliveryPipelines.createStream as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'],
                expectedHeaderRequestParams
            );
        });

        it('uses async iteration with listDeliveryPipelines without error', async () => {
            const client = new clouddeployModule.v1.CloudDeployClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.deploy.v1.ListDeliveryPipelinesRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.deploy.v1.DeliveryPipeline()),
              generateSampleMessage(new protos.google.cloud.deploy.v1.DeliveryPipeline()),
              generateSampleMessage(new protos.google.cloud.deploy.v1.DeliveryPipeline()),
            ];
            client.descriptors.page.listDeliveryPipelines.asyncIterate = stubAsyncIterationCall(expectedResponse);
            const responses: protos.google.cloud.deploy.v1.IDeliveryPipeline[] = [];
            const iterable = client.listDeliveryPipelinesAsync(request);
            for await (const resource of iterable) {
                responses.push(resource!);
            }
            assert.deepStrictEqual(responses, expectedResponse);
            assert.deepStrictEqual(
                (client.descriptors.page.listDeliveryPipelines.asyncIterate as SinonStub)
                    .getCall(0).args[1], request);
            assert.strictEqual(
                (client.descriptors.page.listDeliveryPipelines.asyncIterate as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'],
                expectedHeaderRequestParams
            );
        });

        it('uses async iteration with listDeliveryPipelines with error', async () => {
            const client = new clouddeployModule.v1.CloudDeployClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.deploy.v1.ListDeliveryPipelinesRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";const expectedError = new Error('expected');
            client.descriptors.page.listDeliveryPipelines.asyncIterate = stubAsyncIterationCall(undefined, expectedError);
            const iterable = client.listDeliveryPipelinesAsync(request);
            await assert.rejects(async () => {
                const responses: protos.google.cloud.deploy.v1.IDeliveryPipeline[] = [];
                for await (const resource of iterable) {
                    responses.push(resource!);
                }
            });
            assert.deepStrictEqual(
                (client.descriptors.page.listDeliveryPipelines.asyncIterate as SinonStub)
                    .getCall(0).args[1], request);
            assert.strictEqual(
                (client.descriptors.page.listDeliveryPipelines.asyncIterate as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'],
                expectedHeaderRequestParams
            );
        });
    });

    describe('listTargets', () => {
        it('invokes listTargets without error', async () => {
            const client = new clouddeployModule.v1.CloudDeployClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.deploy.v1.ListTargetsRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.deploy.v1.Target()),
              generateSampleMessage(new protos.google.cloud.deploy.v1.Target()),
              generateSampleMessage(new protos.google.cloud.deploy.v1.Target()),
            ];
            client.innerApiCalls.listTargets = stubSimpleCall(expectedResponse);
            const [response] = await client.listTargets(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.listTargets as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes listTargets without error using callback', async () => {
            const client = new clouddeployModule.v1.CloudDeployClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.deploy.v1.ListTargetsRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.deploy.v1.Target()),
              generateSampleMessage(new protos.google.cloud.deploy.v1.Target()),
              generateSampleMessage(new protos.google.cloud.deploy.v1.Target()),
            ];
            client.innerApiCalls.listTargets = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.listTargets(
                    request,
                    (err?: Error|null, result?: protos.google.cloud.deploy.v1.ITarget[]|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.listTargets as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes listTargets with error', async () => {
            const client = new clouddeployModule.v1.CloudDeployClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.deploy.v1.ListTargetsRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.listTargets = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.listTargets(request), expectedError);
            assert((client.innerApiCalls.listTargets as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes listTargetsStream without error', async () => {
            const client = new clouddeployModule.v1.CloudDeployClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.deploy.v1.ListTargetsRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.deploy.v1.Target()),
              generateSampleMessage(new protos.google.cloud.deploy.v1.Target()),
              generateSampleMessage(new protos.google.cloud.deploy.v1.Target()),
            ];
            client.descriptors.page.listTargets.createStream = stubPageStreamingCall(expectedResponse);
            const stream = client.listTargetsStream(request);
            const promise = new Promise((resolve, reject) => {
                const responses: protos.google.cloud.deploy.v1.Target[] = [];
                stream.on('data', (response: protos.google.cloud.deploy.v1.Target) => {
                    responses.push(response);
                });
                stream.on('end', () => {
                    resolve(responses);
                });
                stream.on('error', (err: Error) => {
                    reject(err);
                });
            });
            const responses = await promise;
            assert.deepStrictEqual(responses, expectedResponse);
            assert((client.descriptors.page.listTargets.createStream as SinonStub)
                .getCall(0).calledWith(client.innerApiCalls.listTargets, request));
            assert.strictEqual(
                (client.descriptors.page.listTargets.createStream as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'],
                expectedHeaderRequestParams
            );
        });

        it('invokes listTargetsStream with error', async () => {
            const client = new clouddeployModule.v1.CloudDeployClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.deploy.v1.ListTargetsRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedError = new Error('expected');
            client.descriptors.page.listTargets.createStream = stubPageStreamingCall(undefined, expectedError);
            const stream = client.listTargetsStream(request);
            const promise = new Promise((resolve, reject) => {
                const responses: protos.google.cloud.deploy.v1.Target[] = [];
                stream.on('data', (response: protos.google.cloud.deploy.v1.Target) => {
                    responses.push(response);
                });
                stream.on('end', () => {
                    resolve(responses);
                });
                stream.on('error', (err: Error) => {
                    reject(err);
                });
            });
            await assert.rejects(promise, expectedError);
            assert((client.descriptors.page.listTargets.createStream as SinonStub)
                .getCall(0).calledWith(client.innerApiCalls.listTargets, request));
            assert.strictEqual(
                (client.descriptors.page.listTargets.createStream as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'],
                expectedHeaderRequestParams
            );
        });

        it('uses async iteration with listTargets without error', async () => {
            const client = new clouddeployModule.v1.CloudDeployClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.deploy.v1.ListTargetsRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.deploy.v1.Target()),
              generateSampleMessage(new protos.google.cloud.deploy.v1.Target()),
              generateSampleMessage(new protos.google.cloud.deploy.v1.Target()),
            ];
            client.descriptors.page.listTargets.asyncIterate = stubAsyncIterationCall(expectedResponse);
            const responses: protos.google.cloud.deploy.v1.ITarget[] = [];
            const iterable = client.listTargetsAsync(request);
            for await (const resource of iterable) {
                responses.push(resource!);
            }
            assert.deepStrictEqual(responses, expectedResponse);
            assert.deepStrictEqual(
                (client.descriptors.page.listTargets.asyncIterate as SinonStub)
                    .getCall(0).args[1], request);
            assert.strictEqual(
                (client.descriptors.page.listTargets.asyncIterate as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'],
                expectedHeaderRequestParams
            );
        });

        it('uses async iteration with listTargets with error', async () => {
            const client = new clouddeployModule.v1.CloudDeployClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.deploy.v1.ListTargetsRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";const expectedError = new Error('expected');
            client.descriptors.page.listTargets.asyncIterate = stubAsyncIterationCall(undefined, expectedError);
            const iterable = client.listTargetsAsync(request);
            await assert.rejects(async () => {
                const responses: protos.google.cloud.deploy.v1.ITarget[] = [];
                for await (const resource of iterable) {
                    responses.push(resource!);
                }
            });
            assert.deepStrictEqual(
                (client.descriptors.page.listTargets.asyncIterate as SinonStub)
                    .getCall(0).args[1], request);
            assert.strictEqual(
                (client.descriptors.page.listTargets.asyncIterate as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'],
                expectedHeaderRequestParams
            );
        });
    });

    describe('listReleases', () => {
        it('invokes listReleases without error', async () => {
            const client = new clouddeployModule.v1.CloudDeployClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.deploy.v1.ListReleasesRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.deploy.v1.Release()),
              generateSampleMessage(new protos.google.cloud.deploy.v1.Release()),
              generateSampleMessage(new protos.google.cloud.deploy.v1.Release()),
            ];
            client.innerApiCalls.listReleases = stubSimpleCall(expectedResponse);
            const [response] = await client.listReleases(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.listReleases as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes listReleases without error using callback', async () => {
            const client = new clouddeployModule.v1.CloudDeployClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.deploy.v1.ListReleasesRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.deploy.v1.Release()),
              generateSampleMessage(new protos.google.cloud.deploy.v1.Release()),
              generateSampleMessage(new protos.google.cloud.deploy.v1.Release()),
            ];
            client.innerApiCalls.listReleases = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.listReleases(
                    request,
                    (err?: Error|null, result?: protos.google.cloud.deploy.v1.IRelease[]|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.listReleases as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes listReleases with error', async () => {
            const client = new clouddeployModule.v1.CloudDeployClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.deploy.v1.ListReleasesRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.listReleases = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.listReleases(request), expectedError);
            assert((client.innerApiCalls.listReleases as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes listReleasesStream without error', async () => {
            const client = new clouddeployModule.v1.CloudDeployClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.deploy.v1.ListReleasesRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.deploy.v1.Release()),
              generateSampleMessage(new protos.google.cloud.deploy.v1.Release()),
              generateSampleMessage(new protos.google.cloud.deploy.v1.Release()),
            ];
            client.descriptors.page.listReleases.createStream = stubPageStreamingCall(expectedResponse);
            const stream = client.listReleasesStream(request);
            const promise = new Promise((resolve, reject) => {
                const responses: protos.google.cloud.deploy.v1.Release[] = [];
                stream.on('data', (response: protos.google.cloud.deploy.v1.Release) => {
                    responses.push(response);
                });
                stream.on('end', () => {
                    resolve(responses);
                });
                stream.on('error', (err: Error) => {
                    reject(err);
                });
            });
            const responses = await promise;
            assert.deepStrictEqual(responses, expectedResponse);
            assert((client.descriptors.page.listReleases.createStream as SinonStub)
                .getCall(0).calledWith(client.innerApiCalls.listReleases, request));
            assert.strictEqual(
                (client.descriptors.page.listReleases.createStream as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'],
                expectedHeaderRequestParams
            );
        });

        it('invokes listReleasesStream with error', async () => {
            const client = new clouddeployModule.v1.CloudDeployClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.deploy.v1.ListReleasesRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedError = new Error('expected');
            client.descriptors.page.listReleases.createStream = stubPageStreamingCall(undefined, expectedError);
            const stream = client.listReleasesStream(request);
            const promise = new Promise((resolve, reject) => {
                const responses: protos.google.cloud.deploy.v1.Release[] = [];
                stream.on('data', (response: protos.google.cloud.deploy.v1.Release) => {
                    responses.push(response);
                });
                stream.on('end', () => {
                    resolve(responses);
                });
                stream.on('error', (err: Error) => {
                    reject(err);
                });
            });
            await assert.rejects(promise, expectedError);
            assert((client.descriptors.page.listReleases.createStream as SinonStub)
                .getCall(0).calledWith(client.innerApiCalls.listReleases, request));
            assert.strictEqual(
                (client.descriptors.page.listReleases.createStream as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'],
                expectedHeaderRequestParams
            );
        });

        it('uses async iteration with listReleases without error', async () => {
            const client = new clouddeployModule.v1.CloudDeployClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.deploy.v1.ListReleasesRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.deploy.v1.Release()),
              generateSampleMessage(new protos.google.cloud.deploy.v1.Release()),
              generateSampleMessage(new protos.google.cloud.deploy.v1.Release()),
            ];
            client.descriptors.page.listReleases.asyncIterate = stubAsyncIterationCall(expectedResponse);
            const responses: protos.google.cloud.deploy.v1.IRelease[] = [];
            const iterable = client.listReleasesAsync(request);
            for await (const resource of iterable) {
                responses.push(resource!);
            }
            assert.deepStrictEqual(responses, expectedResponse);
            assert.deepStrictEqual(
                (client.descriptors.page.listReleases.asyncIterate as SinonStub)
                    .getCall(0).args[1], request);
            assert.strictEqual(
                (client.descriptors.page.listReleases.asyncIterate as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'],
                expectedHeaderRequestParams
            );
        });

        it('uses async iteration with listReleases with error', async () => {
            const client = new clouddeployModule.v1.CloudDeployClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.deploy.v1.ListReleasesRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";const expectedError = new Error('expected');
            client.descriptors.page.listReleases.asyncIterate = stubAsyncIterationCall(undefined, expectedError);
            const iterable = client.listReleasesAsync(request);
            await assert.rejects(async () => {
                const responses: protos.google.cloud.deploy.v1.IRelease[] = [];
                for await (const resource of iterable) {
                    responses.push(resource!);
                }
            });
            assert.deepStrictEqual(
                (client.descriptors.page.listReleases.asyncIterate as SinonStub)
                    .getCall(0).args[1], request);
            assert.strictEqual(
                (client.descriptors.page.listReleases.asyncIterate as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'],
                expectedHeaderRequestParams
            );
        });
    });

    describe('listRollouts', () => {
        it('invokes listRollouts without error', async () => {
            const client = new clouddeployModule.v1.CloudDeployClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.deploy.v1.ListRolloutsRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.deploy.v1.Rollout()),
              generateSampleMessage(new protos.google.cloud.deploy.v1.Rollout()),
              generateSampleMessage(new protos.google.cloud.deploy.v1.Rollout()),
            ];
            client.innerApiCalls.listRollouts = stubSimpleCall(expectedResponse);
            const [response] = await client.listRollouts(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.listRollouts as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes listRollouts without error using callback', async () => {
            const client = new clouddeployModule.v1.CloudDeployClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.deploy.v1.ListRolloutsRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.deploy.v1.Rollout()),
              generateSampleMessage(new protos.google.cloud.deploy.v1.Rollout()),
              generateSampleMessage(new protos.google.cloud.deploy.v1.Rollout()),
            ];
            client.innerApiCalls.listRollouts = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.listRollouts(
                    request,
                    (err?: Error|null, result?: protos.google.cloud.deploy.v1.IRollout[]|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.listRollouts as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes listRollouts with error', async () => {
            const client = new clouddeployModule.v1.CloudDeployClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.deploy.v1.ListRolloutsRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.listRollouts = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.listRollouts(request), expectedError);
            assert((client.innerApiCalls.listRollouts as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes listRolloutsStream without error', async () => {
            const client = new clouddeployModule.v1.CloudDeployClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.deploy.v1.ListRolloutsRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.deploy.v1.Rollout()),
              generateSampleMessage(new protos.google.cloud.deploy.v1.Rollout()),
              generateSampleMessage(new protos.google.cloud.deploy.v1.Rollout()),
            ];
            client.descriptors.page.listRollouts.createStream = stubPageStreamingCall(expectedResponse);
            const stream = client.listRolloutsStream(request);
            const promise = new Promise((resolve, reject) => {
                const responses: protos.google.cloud.deploy.v1.Rollout[] = [];
                stream.on('data', (response: protos.google.cloud.deploy.v1.Rollout) => {
                    responses.push(response);
                });
                stream.on('end', () => {
                    resolve(responses);
                });
                stream.on('error', (err: Error) => {
                    reject(err);
                });
            });
            const responses = await promise;
            assert.deepStrictEqual(responses, expectedResponse);
            assert((client.descriptors.page.listRollouts.createStream as SinonStub)
                .getCall(0).calledWith(client.innerApiCalls.listRollouts, request));
            assert.strictEqual(
                (client.descriptors.page.listRollouts.createStream as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'],
                expectedHeaderRequestParams
            );
        });

        it('invokes listRolloutsStream with error', async () => {
            const client = new clouddeployModule.v1.CloudDeployClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.deploy.v1.ListRolloutsRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedError = new Error('expected');
            client.descriptors.page.listRollouts.createStream = stubPageStreamingCall(undefined, expectedError);
            const stream = client.listRolloutsStream(request);
            const promise = new Promise((resolve, reject) => {
                const responses: protos.google.cloud.deploy.v1.Rollout[] = [];
                stream.on('data', (response: protos.google.cloud.deploy.v1.Rollout) => {
                    responses.push(response);
                });
                stream.on('end', () => {
                    resolve(responses);
                });
                stream.on('error', (err: Error) => {
                    reject(err);
                });
            });
            await assert.rejects(promise, expectedError);
            assert((client.descriptors.page.listRollouts.createStream as SinonStub)
                .getCall(0).calledWith(client.innerApiCalls.listRollouts, request));
            assert.strictEqual(
                (client.descriptors.page.listRollouts.createStream as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'],
                expectedHeaderRequestParams
            );
        });

        it('uses async iteration with listRollouts without error', async () => {
            const client = new clouddeployModule.v1.CloudDeployClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
        });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.deploy.v1.ListRolloutsRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedResponse = [
              generateSampleMessage(new protos.google.cloud.deploy.v1.Rollout()),
              generateSampleMessage(new protos.google.cloud.deploy.v1.Rollout()),
              generateSampleMessage(new protos.google.cloud.deploy.v1.Rollout()),
            ];
            client.descriptors.page.listRollouts.asyncIterate = stubAsyncIterationCall(expectedResponse);
            const responses: protos.google.cloud.deploy.v1.IRollout[] = [];
            const iterable = client.listRolloutsAsync(request);
            for await (const resource of iterable) {
                responses.push(resource!);
            }
            assert.deepStrictEqual(responses, expectedResponse);
            assert.deepStrictEqual(
                (client.descriptors.page.listRollouts.asyncIterate as SinonStub)
                    .getCall(0).args[1], request);
            assert.strictEqual(
                (client.descriptors.page.listRollouts.asyncIterate as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'],
                expectedHeaderRequestParams
            );
        });

        it('uses async iteration with listRollouts with error', async () => {
            const client = new clouddeployModule.v1.CloudDeployClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.deploy.v1.ListRolloutsRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";const expectedError = new Error('expected');
            client.descriptors.page.listRollouts.asyncIterate = stubAsyncIterationCall(undefined, expectedError);
            const iterable = client.listRolloutsAsync(request);
            await assert.rejects(async () => {
                const responses: protos.google.cloud.deploy.v1.IRollout[] = [];
                for await (const resource of iterable) {
                    responses.push(resource!);
                }
            });
            assert.deepStrictEqual(
                (client.descriptors.page.listRollouts.asyncIterate as SinonStub)
                    .getCall(0).args[1], request);
            assert.strictEqual(
                (client.descriptors.page.listRollouts.asyncIterate as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'],
                expectedHeaderRequestParams
            );
        });
    });

    describe('Path templates', () => {

        describe('build', () => {
            const fakePath = "/rendered/path/build";
            const expectedParameters = {
                project: "projectValue",
                location: "locationValue",
                build: "buildValue",
            };
            const client = new clouddeployModule.v1.CloudDeployClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.buildPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.buildPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('buildPath', () => {
                const result = client.buildPath("projectValue", "locationValue", "buildValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.buildPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchProjectFromBuildName', () => {
                const result = client.matchProjectFromBuildName(fakePath);
                assert.strictEqual(result, "projectValue");
                assert((client.pathTemplates.buildPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchLocationFromBuildName', () => {
                const result = client.matchLocationFromBuildName(fakePath);
                assert.strictEqual(result, "locationValue");
                assert((client.pathTemplates.buildPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchBuildFromBuildName', () => {
                const result = client.matchBuildFromBuildName(fakePath);
                assert.strictEqual(result, "buildValue");
                assert((client.pathTemplates.buildPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('cluster', () => {
            const fakePath = "/rendered/path/cluster";
            const expectedParameters = {
                project: "projectValue",
                location: "locationValue",
                cluster: "clusterValue",
            };
            const client = new clouddeployModule.v1.CloudDeployClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.clusterPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.clusterPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('clusterPath', () => {
                const result = client.clusterPath("projectValue", "locationValue", "clusterValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.clusterPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchProjectFromClusterName', () => {
                const result = client.matchProjectFromClusterName(fakePath);
                assert.strictEqual(result, "projectValue");
                assert((client.pathTemplates.clusterPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchLocationFromClusterName', () => {
                const result = client.matchLocationFromClusterName(fakePath);
                assert.strictEqual(result, "locationValue");
                assert((client.pathTemplates.clusterPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchClusterFromClusterName', () => {
                const result = client.matchClusterFromClusterName(fakePath);
                assert.strictEqual(result, "clusterValue");
                assert((client.pathTemplates.clusterPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('config', () => {
            const fakePath = "/rendered/path/config";
            const expectedParameters = {
                project: "projectValue",
                location: "locationValue",
            };
            const client = new clouddeployModule.v1.CloudDeployClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.configPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.configPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('configPath', () => {
                const result = client.configPath("projectValue", "locationValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.configPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchProjectFromConfigName', () => {
                const result = client.matchProjectFromConfigName(fakePath);
                assert.strictEqual(result, "projectValue");
                assert((client.pathTemplates.configPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchLocationFromConfigName', () => {
                const result = client.matchLocationFromConfigName(fakePath);
                assert.strictEqual(result, "locationValue");
                assert((client.pathTemplates.configPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('deliveryPipeline', () => {
            const fakePath = "/rendered/path/deliveryPipeline";
            const expectedParameters = {
                project: "projectValue",
                location: "locationValue",
                delivery_pipeline: "deliveryPipelineValue",
            };
            const client = new clouddeployModule.v1.CloudDeployClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.deliveryPipelinePathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.deliveryPipelinePathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('deliveryPipelinePath', () => {
                const result = client.deliveryPipelinePath("projectValue", "locationValue", "deliveryPipelineValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.deliveryPipelinePathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchProjectFromDeliveryPipelineName', () => {
                const result = client.matchProjectFromDeliveryPipelineName(fakePath);
                assert.strictEqual(result, "projectValue");
                assert((client.pathTemplates.deliveryPipelinePathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchLocationFromDeliveryPipelineName', () => {
                const result = client.matchLocationFromDeliveryPipelineName(fakePath);
                assert.strictEqual(result, "locationValue");
                assert((client.pathTemplates.deliveryPipelinePathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchDeliveryPipelineFromDeliveryPipelineName', () => {
                const result = client.matchDeliveryPipelineFromDeliveryPipelineName(fakePath);
                assert.strictEqual(result, "deliveryPipelineValue");
                assert((client.pathTemplates.deliveryPipelinePathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('location', () => {
            const fakePath = "/rendered/path/location";
            const expectedParameters = {
                project: "projectValue",
                location: "locationValue",
            };
            const client = new clouddeployModule.v1.CloudDeployClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.locationPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.locationPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('locationPath', () => {
                const result = client.locationPath("projectValue", "locationValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.locationPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchProjectFromLocationName', () => {
                const result = client.matchProjectFromLocationName(fakePath);
                assert.strictEqual(result, "projectValue");
                assert((client.pathTemplates.locationPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchLocationFromLocationName', () => {
                const result = client.matchLocationFromLocationName(fakePath);
                assert.strictEqual(result, "locationValue");
                assert((client.pathTemplates.locationPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('project', () => {
            const fakePath = "/rendered/path/project";
            const expectedParameters = {
                project: "projectValue",
            };
            const client = new clouddeployModule.v1.CloudDeployClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.projectPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.projectPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('projectPath', () => {
                const result = client.projectPath("projectValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.projectPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchProjectFromProjectName', () => {
                const result = client.matchProjectFromProjectName(fakePath);
                assert.strictEqual(result, "projectValue");
                assert((client.pathTemplates.projectPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('release', () => {
            const fakePath = "/rendered/path/release";
            const expectedParameters = {
                project: "projectValue",
                location: "locationValue",
                delivery_pipeline: "deliveryPipelineValue",
                release: "releaseValue",
            };
            const client = new clouddeployModule.v1.CloudDeployClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.releasePathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.releasePathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('releasePath', () => {
                const result = client.releasePath("projectValue", "locationValue", "deliveryPipelineValue", "releaseValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.releasePathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchProjectFromReleaseName', () => {
                const result = client.matchProjectFromReleaseName(fakePath);
                assert.strictEqual(result, "projectValue");
                assert((client.pathTemplates.releasePathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchLocationFromReleaseName', () => {
                const result = client.matchLocationFromReleaseName(fakePath);
                assert.strictEqual(result, "locationValue");
                assert((client.pathTemplates.releasePathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchDeliveryPipelineFromReleaseName', () => {
                const result = client.matchDeliveryPipelineFromReleaseName(fakePath);
                assert.strictEqual(result, "deliveryPipelineValue");
                assert((client.pathTemplates.releasePathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchReleaseFromReleaseName', () => {
                const result = client.matchReleaseFromReleaseName(fakePath);
                assert.strictEqual(result, "releaseValue");
                assert((client.pathTemplates.releasePathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('rollout', () => {
            const fakePath = "/rendered/path/rollout";
            const expectedParameters = {
                project: "projectValue",
                location: "locationValue",
                delivery_pipeline: "deliveryPipelineValue",
                release: "releaseValue",
                rollout: "rolloutValue",
            };
            const client = new clouddeployModule.v1.CloudDeployClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.rolloutPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.rolloutPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('rolloutPath', () => {
                const result = client.rolloutPath("projectValue", "locationValue", "deliveryPipelineValue", "releaseValue", "rolloutValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.rolloutPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchProjectFromRolloutName', () => {
                const result = client.matchProjectFromRolloutName(fakePath);
                assert.strictEqual(result, "projectValue");
                assert((client.pathTemplates.rolloutPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchLocationFromRolloutName', () => {
                const result = client.matchLocationFromRolloutName(fakePath);
                assert.strictEqual(result, "locationValue");
                assert((client.pathTemplates.rolloutPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchDeliveryPipelineFromRolloutName', () => {
                const result = client.matchDeliveryPipelineFromRolloutName(fakePath);
                assert.strictEqual(result, "deliveryPipelineValue");
                assert((client.pathTemplates.rolloutPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchReleaseFromRolloutName', () => {
                const result = client.matchReleaseFromRolloutName(fakePath);
                assert.strictEqual(result, "releaseValue");
                assert((client.pathTemplates.rolloutPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchRolloutFromRolloutName', () => {
                const result = client.matchRolloutFromRolloutName(fakePath);
                assert.strictEqual(result, "rolloutValue");
                assert((client.pathTemplates.rolloutPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('target', () => {
            const fakePath = "/rendered/path/target";
            const expectedParameters = {
                project: "projectValue",
                location: "locationValue",
                target: "targetValue",
            };
            const client = new clouddeployModule.v1.CloudDeployClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.targetPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.targetPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('targetPath', () => {
                const result = client.targetPath("projectValue", "locationValue", "targetValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.targetPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchProjectFromTargetName', () => {
                const result = client.matchProjectFromTargetName(fakePath);
                assert.strictEqual(result, "projectValue");
                assert((client.pathTemplates.targetPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchLocationFromTargetName', () => {
                const result = client.matchLocationFromTargetName(fakePath);
                assert.strictEqual(result, "locationValue");
                assert((client.pathTemplates.targetPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchTargetFromTargetName', () => {
                const result = client.matchTargetFromTargetName(fakePath);
                assert.strictEqual(result, "targetValue");
                assert((client.pathTemplates.targetPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('workerPool', () => {
            const fakePath = "/rendered/path/workerPool";
            const expectedParameters = {
                project: "projectValue",
                location: "locationValue",
                worker_pool: "workerPoolValue",
            };
            const client = new clouddeployModule.v1.CloudDeployClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.workerPoolPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.workerPoolPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('workerPoolPath', () => {
                const result = client.workerPoolPath("projectValue", "locationValue", "workerPoolValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.workerPoolPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchProjectFromWorkerPoolName', () => {
                const result = client.matchProjectFromWorkerPoolName(fakePath);
                assert.strictEqual(result, "projectValue");
                assert((client.pathTemplates.workerPoolPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchLocationFromWorkerPoolName', () => {
                const result = client.matchLocationFromWorkerPoolName(fakePath);
                assert.strictEqual(result, "locationValue");
                assert((client.pathTemplates.workerPoolPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchWorkerPoolFromWorkerPoolName', () => {
                const result = client.matchWorkerPoolFromWorkerPoolName(fakePath);
                assert.strictEqual(result, "workerPoolValue");
                assert((client.pathTemplates.workerPoolPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });
    });
});
